{"posts":[{"title":"summary of senarios of using ChatGPT","text":"Write regex English revision Usage of software","link":"/2023/05/01/ChatGPT/Senario%20to%20use%20ChatGpt/"},{"title":"what is wiki","text":"Key points interlinked web pages project-related information change the settings to restrict editing From ChatGPT what is wiki A wiki is a collaborative online platform that allows users to create, edit, and maintain interlinked web pages. It serves as a knowledge base where information can be collected, organized, and shared among people. The most famous example of a wiki is Wikipedia, a free, user-generated encyclopedia that contains articles on a wide range of topics. The term “wiki” originates from the Hawaiian word “wiki-wiki,” which means “quick” or “fast.” This is because wikis are designed to enable rapid and easy content creation, editing, and organization by multiple users. Wikis often have a simple markup language or a rich-text editor, which allows users to format text, add links, and insert multimedia elements without having to learn complex programming languages. Access to wikis can be open to the public or restricted to specific user groups, depending on the purpose and intended audience. in github GitHub is a web-based platform primarily used for version control and collaboration in software development. While it’s not a wiki platform in the traditional sense, it does offer a feature called GitHub Wiki, which allows you to create and maintain documentation or other project-related information alongside your code repository. To create and use a wiki on GitHub, follow these steps: Navigate to your GitHub repository. Click on the “Wiki” tab near the top of the page, next to “Issues” and “Pull requests.” If no wiki has been created yet, click on the “Create the first page” button. Enter a title for your wiki page and add the content using the Markdown editor. Click the “Save page” button to save your changes. Once you’ve created the initial wiki page, you can add more pages, edit existing pages, and manage the wiki as needed. GitHub Wiki supports Markdown syntax, which allows you to format text, create tables, add links, and insert images or other multimedia elements. Keep in mind that by default, the GitHub Wiki is publicly accessible, and anyone with a GitHub account can edit it. However, you can change the settings to restrict editing to collaborators only by navigating to your repository settings and selecting the “Restrict editing to collaborators only” checkbox under the “Wikis” section.","link":"/2023/05/01/General/Wiki/"},{"title":"linux","text":"Key pointsFrom ChatGPT my question ChatGPT’s answer my question ChatGPT’s answer my question ChatGPT’s answer my question ChatGPT’s answer my question ChatGPT’s answer","link":"/2023/05/02/General/linux/"},{"title":"Windows file system","text":"Key points 32 and 64-bit processor architecture folders in C disk in Windows From ChatGPT 为什么有些软件的默认安装路径是C:\\Users\\用户名\\AppData\\Roaming? - root的回答 - 知乎 https://www.zhihu.com/question/548340950/answer/2637630471summary the above, give me the key information in English The key differences between the directories mentioned are: C:\\Program Files - The installation directory for 64-bit software, accessible to all users. Admin permission is required to install software here. Storing program data in this directory poses a security risk. C:\\Program Files(x86) - Similar to the above, but for 32-bit applications. C:\\Users\\Username\\AppData\\Roaming - Accessed through the %AppData% environment variable, stores user-specific data. This data is synced across computers in a domain network. C:\\Users\\Username\\AppData\\Local - Accessed through the %LocalAppData% environment variable, stores local user data that is not synced across computers in a domain network. C:\\ProgramData - Contains data shared among all users. Use this directory for software data that should be consistent across users. C:\\Users\\Username - The user’s home directory, where personal data should be stored. Cross-platform software often generates hidden files with a dot prefix in this directory. C:\\Users\\Username\\Documents - The “My Documents” folder, meant for user-generated data like documents, photos, music, videos, and archives. Some software may inappropriately store program data here. The proper separation of software installation and data storage depends on the software developer and the installation package tool. It’s important to follow guidelines and avoid storing data in incorrect locations to ensure easier data backups and software upgrades. “做到程序和数据分离，不要在程序安装目录下写数据，更不要把数据写到C:根目录Q下，简直是灾难。” why? Separating program files and data is crucial for various reasons: Organization and clarity: Keeping program files and data separate makes it easier to manage and locate specific files when needed. Mixing data and program files can lead to confusion and difficulty in finding essential files. Security: Storing data in program directories, especially those that require administrator permissions, can expose the data to security risks. Malicious software may take advantage of the elevated permissions and compromise the data. Data integrity: Separating program files and data ensures that software updates or uninstallation processes do not accidentally delete or modify essential data. This separation helps maintain the integrity and safety of your data. Backup and migration: Keeping data separate from program files simplifies the backup process and makes it easier to transfer data between different computers or devices. This separation allows users to back up essential data without including unnecessary program files, making data management more efficient. User management: In multi-user environments, different users might have different access levels and data requirements. Separating program files and data allows for more granular control over access permissions and ensures that user-specific data is kept separate and private. Storing data directly in the C:\\ root directory is particularly problematic because it makes the file system disorganized, difficult to manage, and potentially exposes your data to security risks. Moreover, it goes against best practices for organizing files and directories on a computer. why x86 is for 32-bit app The term “x86” is used to refer to 32-bit applications because it originates from the Intel 8086 processor family. The 8086 was a 16-bit processor introduced by Intel in 1978. As new processors were developed in the same line, they maintained backward compatibility with the 8086 instruction set, which is why they were named with an “86” suffix, like the 80186, 80286, 80386, and 80486. When the 80386 was introduced, it brought support for 32-bit processing while still retaining compatibility with the older 16-bit x86 instruction set. This extended architecture was called IA-32 (Intel Architecture, 32-bit). As time went on and newer processors were released, the x86 nomenclature persisted and became synonymous with 32-bit architecture, even though it originated from a 16-bit processor family. In contrast, the x64 architecture, also known as x86-64 or AMD64, was introduced by AMD to extend the x86 architecture to 64 bits, while maintaining backward compatibility with 32-bit applications. So, the “x86” term is used for 32-bit applications to distinguish them from the newer 64-bit (x64) applications. so amd invent 64-bit processer? AMD did not invent the 64-bit processor, but they were the first to extend the x86 architecture to 64 bits. The first 64-bit processor architecture was actually developed by MIPS Technologies, with the MIPS R4000, released in 1991. However, when it comes to the x86 architecture commonly used in personal computers, AMD played a significant role. They introduced the x86-64 (AMD64) architecture, an extension of the existing 32-bit x86 architecture that added 64-bit capabilities while maintaining backward compatibility with 32-bit applications. Intel, the original creator of the x86 architecture, later adopted a similar approach with their own 64-bit extension called Intel 64 (formerly known as EM64T). Intel 64 and AMD64 are largely compatible, and together they form the x86-64 architecture that is widely used in modern personal computers. introduce amd and intel briefly AMD (Advanced Micro Devices): AMD is an American multinational semiconductor company founded in 1969 by Jerry Sanders and headquartered in Santa Clara, California. The company specializes in developing and manufacturing computer processors, graphics processing units (GPUs), and related technologies for both consumer and enterprise markets. AMD is best known for its line of x86-64 CPUs, such as the Athlon, Phenom, Ryzen, and EPYC processors. They have been a key competitor to Intel in the CPU market. AMD also acquired ATI Technologies in 2006, which enabled them to enter the GPU market and compete against NVIDIA with their Radeon graphics cards. Intel (Integrated Electronics Corporation): Intel is an American multinational technology company founded in 1968 by Robert Noyce and Gordon Moore, headquartered in Santa Clara, California. It is one of the world’s largest semiconductor chip manufacturers and is best known for its line of x86 microprocessors, which are found in a majority of personal computers. Intel’s product lineup includes a wide range of processors, such as the Core i3, i5, i7, and i9 series, as well as the Xeon processors used in servers and workstations. In addition to CPUs, Intel also manufactures chipsets, motherboards, solid-state drives (SSDs), network interface cards, and other computer components. Both AMD and Intel are industry leaders in the development of computer processors and have played significant roles in shaping the technology landscape over the past few decades. While Intel has traditionally dominated the CPU market, AMD has made significant strides in recent years, offering competitive products in terms of performance and price.","link":"/2023/05/02/CS/OS/Windows%20file%20system/"},{"title":"Connect to the Docker container using SSH from the host machine","text":"Key points在容器中下载好ssh I dont’t used to write locally 我过去并不是本地写，用虚拟机的sdk跑， 而是本地写，本地sdk检查，然后把检查后的代码传到虚拟机文件夹里，用虚拟机的sdk跑 本质上来说不是sdk的远距离起作用，只是利用了一个文件同步功能，然后本地检查和远地运行分开 dockerfile？ docker build？ From ChatGPT Create a Dockerfile: Create a new file called Dockerfile in a directory. This file will contain instructions to build a Docker image with SSH enabled. 1234567891011121314151617# Use an existing image as the baseFROM ubuntu:latest# Install OpenSSH serverRUN apt-get update &amp;&amp; apt-get install -y openssh-server# Create the /var/run/sshd directory (for privilege separation)RUN mkdir -p /var/run/sshd# Set the root password for SSH accessRUN echo 'root:YOUR_PASSWORD' | chpasswd# Expose the SSH portEXPOSE 22# Start the SSH serverCMD [&quot;/usr/sbin/sshd&quot;, &quot;-D&quot;] Replace YOUR_PASSWORD with a secure password of your choice. Build the Docker image: Navigate to the directory containing the Dockerfile and run the following command: 1docker build -t my_ssh_container . This will create a new Docker image named my_ssh_container with SSH enabled. Run the Docker container: 1docker run -d -p 2222:22 --name my_ssh_container_instance my_ssh_container This command will start a new container named my_ssh_container_instance based on the my_ssh_container image. It maps the container’s port 22 (SSH) to the host’s port 2222. Connect to the Docker container via SSH: From the host machine or another computer, you can now connect to the Docker container using SSH: 1ssh root@localhost -p 2222 Replace localhost with the IP address of the host machine if you’re connecting from another computer. Enter the password you set in the Dockerfile when prompted. You should now have SSH access to your Docker container. Note that this method is not recommended for production environments, as it has security implications. For production, consider using docker exec to access the container or setting up proper user authentication and key-based authentication for SSH.","link":"/2023/04/26/CS/network/Connect%20to%20the%20Docker%20container%20using%20SSH%20from%20the%20host%20machine/"},{"title":"knowledge of ifconfig","text":"i’m a linux learner, i want you teach me something about internet . could you explain me the following content in easy to understand way? Sure! What you’re looking at is the output of a command that displays information about the network interfaces on a Linux system. This output shows details for four network interfaces: docker0, ens33, lo, and veth557dd78. Let’s break down each section in simpler terms: docker0: This is a virtual network interface created by Docker, a container platform. The information provided includes: 12345678docker0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 172.17.0.1 netmask 255.255.0.0 broadcast 172.17.255.255 inet6 fe80::42:46ff:fe73:fc6c prefixlen 64 scopeid 0x20&lt;link&gt; ether 02:42:46:73:fc:6c txqueuelen 0 (以太网) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 36 bytes 4946 (4.9 KB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 ens33: This is a physical Ethernet interface connected to the system. The information provided includes: lo: This is the loopback interface, which is a virtual network interface that allows the system to communicate with itself. veth557dd78: This is another virtual Ethernet interface, likely associated with a Docker container. In summary, this output provides information about the network interfaces on your system, including IP addresses, subnet masks, broadcast addresses, and details about received and transmitted packets. physical Ethernet interface loopback interface, virtual Ethernet interface, MAC address i don’t know these terms I understand. Let me explain these terms in a simpler way: Physical Ethernet interface: This is a hardware component that connects your computer to a wired network, usually using an Ethernet cable. The Ethernet interface handles sending and receiving data between your computer and the network. An example of a physical Ethernet interface is the ens33 interface from the output you provided. Loopback interface: This is a special virtual network interface that allows your computer to communicate with itself. It is mainly used for testing and troubleshooting purposes. The IP address assigned to the loopback interface is usually 127.0.0.1 for IPv4 and ::1 for IPv6. The lo interface from the output you provided is a loopback interface. Virtual Ethernet interface: This is a software-created network interface that emulates the behavior of a physical Ethernet interface. Virtual Ethernet interfaces are often used in virtualization and containerization technologies, like Docker, to provide network connectivity for virtual machines or containers. An example of a virtual Ethernet interface is the docker0 interface from the output you provided. MAC address: A Media Access Control (MAC) address is a unique identifier assigned to a network interface. It is used to identify devices on a network at the data link layer (Layer 2) of the OSI model. MAC addresses are 48 bits in length and are usually represented as six groups of two hexadecimal digits, separated by colons or hyphens (e.g., 02:42:46:73:fc:6c). Every network interface, whether physical or virtual, has a MAC address. above is my virtual machine’s information, following is my real pc’s information, tell me their relationship and other details what are helpful to my learning :Windows IP Configuration 123456789101112131415161718192021222324252627282930313233343536373839404142434445Windows IP ConfigurationEthernet adapter Ethernet: Media State . . . . . . . . . . . : Media disconnected Connection-specific DNS Suffix . :Wireless LAN adapter Local Area Connection* 1: Media State . . . . . . . . . . . : Media disconnected Connection-specific DNS Suffix . :Wireless LAN adapter Local Area Connection* 2: Media State . . . . . . . . . . . : Media disconnected Connection-specific DNS Suffix . :Ethernet adapter VMware Network Adapter VMnet1: Connection-specific DNS Suffix . : Link-local IPv6 Address . . . . . : fe80::9a10:ed69:ef20:bf29%5 IPv4 Address. . . . . . . . . . . : 192.168.141.1 Subnet Mask . . . . . . . . . . . : 255.255.255.0 Default Gateway . . . . . . . . . :Ethernet adapter VMware Network Adapter VMnet8: Connection-specific DNS Suffix . : Link-local IPv6 Address . . . . . : fe80::b288:751e:149a:1576%7 IPv4 Address. . . . . . . . . . . : 192.168.255.1 Subnet Mask . . . . . . . . . . . : 255.255.255.0 Default Gateway . . . . . . . . . :Wireless LAN adapter Wi-Fi: Connection-specific DNS Suffix . : Link-local IPv6 Address . . . . . : fe80::d68c:caed:21ae:5496%11 IPv4 Address. . . . . . . . . . . : 192.168.31.56 Subnet Mask . . . . . . . . . . . : 255.255.255.0 Default Gateway . . . . . . . . . : 192.168.31.1Ethernet adapter Bluetooth Network Connection: Media State . . . . . . . . . . . : Media disconnected Connection-specific DNS Suffix . : The information you provided shows the network interfaces on your real PC, which is running Windows. There are several network interfaces listed, including Ethernet, Wireless LAN (Wi-Fi), and virtual network interfaces created by VMware. Let’s look at the relationship between your real PC and the virtual machine (VM) you mentioned earlier, as well as other useful details for your learning. Ethernet adapter Ethernet: This is the physical Ethernet interface on your real PC. It is currently disconnected (Media State: Media disconnected). Wireless LAN adapters (Local Area Connection 1, Local Area Connection 2, Wi-Fi)**: These are the Wi-Fi interfaces on your real PC. Only the Wi-Fi adapter is connected and has an IP address (IPv4 Address: 192.168.31.56) and a default gateway (192.168.31.1). Ethernet adapter VMware Network Adapter VMnet1 &amp; VMnet8: These are virtual network interfaces created by VMware, a virtualization software. They provide network connectivity between your real PC and the virtual machines running on VMware. The IP addresses assigned to these interfaces are 192.168.141.1 and 192.168.255.1, respectively. Ethernet adapter Bluetooth Network Connection: This is a network interface related to Bluetooth connectivity. It is currently disconnected (Media State: Media disconnected). Now let’s discuss the relationship between your real PC and the virtual machine: Your real PC is running VMware, which hosts your Linux virtual machine. The virtual machine is connected to your real PC through virtual network interfaces (VMware Network Adapter VMnet1 and VMnet8). The ens33 interface on your virtual machine is connected to the VMware Network Adapter VMnet8 on your real PC. We can tell this by the matching IP address subnet (192.168.255.x). In summary, your real PC has several network interfaces, including physical Ethernet, Wi-Fi, and virtual network interfaces created by VMware. The virtual machine hosted on VMware is connected to your real PC through one of these virtual network interfaces. By understanding the relationship between the network interfaces on your real PC and the virtual machine, you can gain a better understanding of how network connectivity is established between them.","link":"/2023/04/22/CS/network/knowledge%20of%20ifconfig/"},{"title":"build a blog using GitHub and Hexo","text":"Key Points what is node.js what is hexo Hexo is a static site generator built on Node.js in the blog, what roles do different tools play? where can i change the content of my blog? how can i make it more fancy? note: there are two repos in the building of project. one(name.github.io) is for the deployment, the other is for the storeration of code. From ChatGPTTo build a blog using GitHub and Hexo, follow these steps: Install Node.js and Git: Hexo is built on Node.js, so you will need to install it on your local machine. Visit the Node.js website (https://nodejs.org/) to download and install the latest version of Node.js. Also, ensure you have Git installed on your machine (https://git-scm.com/downloads). Install Hexo: Open a terminal (or command prompt) and install Hexo using the following command: 1npm install -g hexo-cli Create a new Hexo project: In the terminal, navigate to the directory where you want to create your blog and run the following command: 1hexo init my-blog Replace my-blog with the desired name for your blog directory. This command will create a new Hexo project in the specified directory. Install dependencies: Navigate to the new project directory and install the necessary dependencies: 12cd my-blognpm install Run the Hexo server: Start the Hexo server to preview your blog: 1hexo server By default, your blog will be accessible at http://localhost:4000. Customize your blog: Edit the _config.yml file in the project directory to customize your blog’s settings, such as title, description, and theme. You can also create new posts and pages using the following commands: 12hexo new post &quot;Your Post Title&quot;hexo new page &quot;Your Page Title&quot; Deploy your blog to GitHub Pages: First, install the Hexo GitHub Pages deployment plugin: 1npm install hexo-deployer-git --save Next, configure the deployment settings in the _config.yml file by adding the following lines: 1234deploy: type: git repo: https://github.com/yourusername/yourusername.github.io branch: main Replace yourusername with your GitHub username. Commit your changes and push your project to a new repository on GitHub: 123456git initgit add .git commit -m &quot;Initial commit&quot;git branch -M maingit remote add origin https://github.com/yourusername/my-blog.gitgit push -u origin main Replace yourusername with your GitHub username and my-blog with the desired repository name. Finally, deploy your blog to GitHub Pages: 12hexo generatehexo deploy Your blog should now be available at https://yourusername.github.io. For more information on Hexo and its features, visit the official Hexo documentation: https://hexo.io/docs/ Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2023/04/21/CS/WEB/build%20a%20blog%20using%20GitHub%20and%20Hexo/"},{"title":"change hexo theme","text":"Key pointsFrom ChatGPT how can i change hexo theme in my project Hexo is a static site generator built on Node.js, and it allows you to change the theme of your project easily. To change the Hexo theme, follow these steps: Find a theme: Visit the Hexo theme repository (https://hexo.io/themes/) or search for Hexo themes on GitHub to find a theme that you like. Download the theme: Once you have found a theme, download it or clone the theme’s repository to your computer. To clone the repository using Git, open a terminal or command prompt, navigate to the themes directory inside your Hexo project, and run: 1git clone https://github.com/username/theme-name.git Replace https://github.com/username/theme-name.git with the actual Git URL of the theme repository. Configure the theme: Open the _config.yml file located in the root directory of your Hexo project. Find the theme property and change its value to the name of the theme’s directory (the one you just cloned or downloaded). For example: 1theme: theme-name Make sure to save the changes in the _config.yml file. Customize the theme (optional): If you need to customize the theme, open the theme’s _config.yml file (located inside the theme’s directory) and make the necessary changes according to the theme’s documentation. Generate and preview the site: After configuring and customizing the theme, run the following commands in your terminal or command prompt to generate the site with the new theme and preview it locally: 123hexo cleanhexo generatehexo server The local preview should be available at http://localhost:4000 (or another port if you’ve configured it differently). Check if the new theme is applied correctly. Deploy the site: If everything looks good, you can deploy the site with the new theme using the hexo deploy command or your preferred deployment method. By following these steps, you should be able to change the theme of your Hexo project. Remember to consult the theme’s documentation for any specific instructions or requirements.","link":"/2023/05/02/CS/WEB/change%20hexo%20theme/"},{"title":"review: April 20, 2023","text":"I’m afraid of I do not have no hair in the future=== ANKI ===I’m afraid that I will have no hair in the future In the part of paying, there would four or five people to pay=== ANKI ===When it came time to pay the bill, four or five people would fight over the bill. Eventually, it is that guy pay=== ANKI ===Eventually, it is still that person who pay. You would share the money, or someone would pay=== ANKI ===Will you split the bill or will one person treat everyone? We don’t care it=== ANKI ===We don’t care much about it or i spent all and afterwards he send his money=== ANKI ===Or I can pay the entire bill, and then he can transfer the money to me later. 我们没时间了=== ANKI ===Our time is up","link":"/2023/04/20/English/review/April%2020,%202023/"},{"title":"May 1, 2023","text":"summary of senarios of using ChatGPT=== ANKI ===Overview of Scenarios for Using ChatGPT Write regex=== ANKI ===Crafting Regular Expressions English revision=== ANKI ===Revising English Text Usage of software=== ANKI ===Guidance on Software Usage 我自己的英语表达=== ANKI ===ChatGPT润色后的","link":"/2023/05/01/English/review/May%201,%202023/"},{"title":"Markdown Syntax","text":"Here’s a list of common Markdown syntax elements: Headers: 123456# Heading level 1## Heading level 2### Heading level 3#### Heading level 4##### Heading level 5###### Heading level 6 Emphasis: 12345678*Italic text*_Italic text_**Bold text**__Bold text__***Bold and italic text***___Bold and italic text___ Lists: Unordered list: 12345- Item 1- Item 2 - Sub-item 1 - Sub-item 2- Item 3 Ordered list: 123451. Item 12. Item 2 1. Sub-item 1 2. Sub-item 23. Item 3 Links: 1[Link text](https://www.example.com) Images: 1![Alt text](https://www.example.com/image.jpg) Blockquotes: 1&gt; This is a blockquote. Inline code: 1This is `inline code`. Code blocks: 1This is a code block. or 12def hello_world(): print(&quot;Hello, World!&quot;) Horizontal rule: 12345---or***or___ Tables: 12345| Column 1 | Column 2 | Column 3 ||----------|----------|----------|| Row 1 | Data | Data || Row 2 | Data | Data || Row 3 | Data | Data | Please note that some Markdown editors or platforms might support additional syntax or slight variations of the basic Markdown syntax. It’s always a good idea to consult the documentation for the specific editor or platform you’re using to ensure compatibility.","link":"/2023/04/23/Tools/markdown/Markdown%20Syntax/"},{"title":"git message","text":"how can i write effective git message Writing effective Git commit messages is crucial for maintaining a clean and understandable project history. Good commit messages help you and your collaborators quickly understand the changes made in each commit. Here are some guidelines to write effective Git commit messages: Write a concise and descriptive subject line: The first line of the commit message should be a short summary (up to 50 characters) of the changes made. Begin with a capital letter and use imperative mood (e.g., “Add”, “Fix”, “Update”). Separate the subject from the body with a blank line: If you need to provide more details about the commit, leave a blank line after the subject line and then write the body. This separation makes the message easier to read. Wrap the body at 72 characters: When writing a longer commit message with a body, limit each line to 72 characters. This ensures that the message is properly formatted and easy to read in various Git tools. Use the body to explain what and why: The body should explain what changes were made and the reasons for those changes. Focus on the context and the motivation behind the changes, rather than describing the exact lines of code that were altered. Use bullet points or lists: If you need to describe multiple changes, use bullet points or lists to make the commit message more readable. Use proper grammar and punctuation: Ensure your commit messages are well-written, with proper grammar, punctuation, and spelling. This makes the messages easier to understand and looks more professional. Here’s an example of an effective Git commit message: 12345Add validation for user registration form- Check if email is unique- Ensure password meets complexity requirements- Validate input length for all fields This example has a clear and descriptive subject line, a blank line separating the subject from the body, a concise explanation of the changes made, and proper formatting. must it start with fix/update/add? No, your Git commit message doesn’t have to start with “fix”, “update”, or “add”. These words are just common examples that follow the convention of using the imperative mood in commit messages. The main idea is to use a verb in the imperative form that briefly and clearly describes the action taken in the commit. Some other examples of verbs you can use are: Remove Change Implement Refactor Merge Create Optimize Reformat Choose the verb that best represents the change made in the commit. The most important aspect is to make the commit message concise, informative, and easy to understand.","link":"/2023/05/01/Tools/Git/git%20message/"},{"title":"obsidian_to_anki regex config","text":"To create a regex pattern that matches the text structure you provided, where the front of the flashcard is on one line and the back of the flashcard is on the next line, you can use the following regex pattern: 1^(.+)\\n\\n(.+) Here’s a breakdown of the regex pattern: ^: matches the beginning of a line. (.+): captures one or more characters (the + quantifier). The first group represents the front of the flashcard. \\n\\n: matches two newline characters, representing the blank line between the front and back of the flashcard. (.+): captures one or more characters (the + quantifier). The second group represents the back of the flashcard. Please note that this regex pattern assumes that there is always a blank line between the front and back of the flashcards. If the structure of your text changes, you may need to adjust the pattern accordingly. I test the regex I build my obsidian to anki work stream sucessfully!","link":"/2023/04/28/Tools/obsidian_to_anki/obsidian_to_anki%20regex%20config/"}],"tags":[],"categories":[{"name":"ChatGPT","slug":"ChatGPT","link":"/categories/ChatGPT/"},{"name":"general","slug":"general","link":"/categories/general/"},{"name":"CS","slug":"CS","link":"/categories/CS/"},{"name":"web","slug":"CS/web","link":"/categories/CS/web/"},{"name":"OS","slug":"CS/OS","link":"/categories/CS/OS/"},{"name":"English","slug":"English","link":"/categories/English/"},{"name":"network","slug":"CS/network","link":"/categories/CS/network/"},{"name":"review","slug":"English/review","link":"/categories/English/review/"},{"name":"Tools","slug":"Tools","link":"/categories/Tools/"},{"name":"Git","slug":"Tools/Git","link":"/categories/Tools/Git/"},{"name":"markdown","slug":"Tools/markdown","link":"/categories/Tools/markdown/"},{"name":"anki","slug":"Tools/anki","link":"/categories/Tools/anki/"},{"name":"obsidian_to_anki","slug":"Tools/anki/obsidian-to-anki","link":"/categories/Tools/anki/obsidian-to-anki/"}],"pages":[{"title":"","text":"&lt;%* tp.user.front %&gt;=== ANKI ===&lt;%* tp.user.back %&gt; &lt;%* tp.user.front %&gt;=== ANKI ===&lt;%* tp.user.back %&gt; &lt;%* tp.user.front %&gt;=== ANKI ===&lt;%* tp.user.back %&gt; &lt;%* tp.user.front %&gt;=== ANKI ===&lt;%* tp.user.back %&gt; &lt;%* tp.user.front %&gt;=== ANKI ===&lt;%* tp.user.back %&gt; &lt;%* tp.user.front %&gt;=== ANKI ===&lt;%* tp.user.back %&gt; &lt;%* tp.user.front %&gt;=== ANKI ===&lt;%* tp.user.back %&gt;","link":"/templates/for%20anki.html"},{"title":"&lt;% tp.file.title %&gt;","text":"Key pointsFrom ChatGPT my question ChatGPT’s answer my question ChatGPT’s answer my question ChatGPT’s answer my question ChatGPT’s answer my question ChatGPT’s answer my question ChatGPT’s answer","link":"/templates/for%20blog.html"}]}